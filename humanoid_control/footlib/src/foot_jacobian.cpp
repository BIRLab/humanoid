//
// File: foot_jacobian.cpp
//
// MATLAB Coder version            : 5.4
// C/C++ source code generated on  : 01-Sep-2023 20:15:53
//

// Include Files
#include "foot_jacobian.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

//
// FOOT_JACOBIAN
//     J = FOOT_JACOBIAN(ROLL,PITCH)
//
// Arguments    : double roll
//                double pitch
//                double J[4]
// Return Type  : void
//
void foot_jacobian(double roll, double pitch, double J[4])
{
  double J_tmp;
  double a_tmp;
  double a_tmp_tmp;
  double b_J_tmp;
  double b_a_tmp;
  double b_a_tmp_tmp;
  double b_unnamed_idx_1_tmp;
  double b_unnamed_idx_2_tmp;
  double c_J_tmp;
  double c_a_tmp;
  double c_a_tmp_tmp;
  double d_J_tmp;
  double d_a_tmp;
  double d_a_tmp_tmp;
  double e_J_tmp;
  double e_a_tmp;
  double e_a_tmp_tmp;
  double f_J_tmp;
  double f_a_tmp;
  double f_a_tmp_tmp;
  double g_a_tmp;
  double g_a_tmp_tmp;
  double h_a_tmp;
  double h_a_tmp_tmp;
  double i_a_tmp;
  double i_a_tmp_tmp;
  double j_a_tmp;
  double j_a_tmp_tmp;
  double k_a_tmp;
  double k_a_tmp_tmp;
  double l_a_tmp;
  double l_a_tmp_tmp;
  double m_a_tmp;
  double n_a_tmp;
  double o_a_tmp;
  double p_a_tmp;
  double q_a_tmp;
  double unnamed_idx_1_tmp;
  double unnamed_idx_2_tmp;
  double unnamed_idx_2_tmp_tmp;
  double unnamed_idx_3_tmp;
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     01-Sep-2023 20:15:50
  a_tmp = std::sin(pitch);
  b_a_tmp = std::cos(pitch);
  a_tmp_tmp = std::cos(roll);
  b_a_tmp_tmp = std::sin(roll);
  c_a_tmp_tmp = a_tmp_tmp * 16.5;
  d_a_tmp_tmp = b_a_tmp_tmp * 16.0;
  c_a_tmp = c_a_tmp_tmp - d_a_tmp_tmp;
  e_a_tmp_tmp = a_tmp * c_a_tmp;
  f_a_tmp_tmp = b_a_tmp * 47.2;
  d_a_tmp = f_a_tmp_tmp + e_a_tmp_tmp;
  g_a_tmp_tmp = b_a_tmp * c_a_tmp;
  h_a_tmp_tmp = g_a_tmp_tmp * 100.0;
  i_a_tmp_tmp = a_tmp * -4720.0;
  c_a_tmp = (i_a_tmp_tmp + h_a_tmp_tmp) + 23200.0;
  e_a_tmp = a_tmp * -47.2;
  f_a_tmp = (e_a_tmp + g_a_tmp_tmp) + 232.0;
  g_a_tmp = b_a_tmp_tmp * 16.5;
  j_a_tmp_tmp = a_tmp_tmp * 16.0;
  k_a_tmp_tmp = j_a_tmp_tmp + g_a_tmp;
  l_a_tmp_tmp = 0.0 - a_tmp * 4720.0;
  h_a_tmp = ((l_a_tmp_tmp + h_a_tmp_tmp) + e_a_tmp_tmp * 0.0) + 23200.0;
  i_a_tmp = b_a_tmp * 4720.0;
  j_a_tmp = i_a_tmp - e_a_tmp_tmp * -100.0;
  k_a_tmp = c_a_tmp_tmp + d_a_tmp_tmp;
  c_a_tmp_tmp = a_tmp * k_a_tmp;
  l_a_tmp = f_a_tmp_tmp + c_a_tmp_tmp;
  d_a_tmp_tmp = b_a_tmp * k_a_tmp;
  f_a_tmp_tmp = d_a_tmp_tmp * 100.0;
  m_a_tmp = (i_a_tmp_tmp + f_a_tmp_tmp) + 29000.0;
  e_a_tmp = (e_a_tmp + d_a_tmp_tmp) + 290.0;
  n_a_tmp = (a_tmp_tmp * -16.0 + g_a_tmp) + 16.0;
  o_a_tmp = ((l_a_tmp_tmp + f_a_tmp_tmp) + c_a_tmp_tmp * 0.0) + 29000.0;
  p_a_tmp = i_a_tmp - c_a_tmp_tmp * -100.0;
  f_a_tmp_tmp = l_a_tmp * l_a_tmp;
  n_a_tmp = ((f_a_tmp_tmp + e_a_tmp * e_a_tmp) + n_a_tmp * n_a_tmp) - 81600.0;
  h_a_tmp_tmp = d_a_tmp * d_a_tmp;
  q_a_tmp = ((h_a_tmp_tmp + f_a_tmp * f_a_tmp) +
             (k_a_tmp_tmp - 16.0) * (k_a_tmp_tmp - 16.0)) -
            51324.0;
  i_a_tmp_tmp = j_a_tmp_tmp - g_a_tmp;
  g_a_tmp = a_tmp * i_a_tmp_tmp;
  j_a_tmp_tmp = b_a_tmp * i_a_tmp_tmp;
  unnamed_idx_1_tmp = a_tmp * k_a_tmp_tmp;
  b_unnamed_idx_1_tmp = b_a_tmp * k_a_tmp_tmp;
  unnamed_idx_2_tmp_tmp = a_tmp * 47.2;
  unnamed_idx_2_tmp = l_a_tmp * (unnamed_idx_2_tmp_tmp - d_a_tmp_tmp) * 2.0;
  b_unnamed_idx_2_tmp = c_a_tmp_tmp * 100.0;
  unnamed_idx_3_tmp = e_a_tmp_tmp * 100.0;
  J_tmp = o_a_tmp * o_a_tmp;
  b_J_tmp = f_a_tmp_tmp + m_a_tmp * m_a_tmp / 10000.0;
  c_J_tmp = 1.0 / std::sqrt(b_J_tmp);
  d_J_tmp = 1.0 / rt_powd_snf(b_J_tmp, 1.5);
  e_J_tmp = n_a_tmp * -0.005;
  f_J_tmp = p_a_tmp * p_a_tmp + J_tmp;
  J[0] =
      (g_a_tmp * -100.0 / o_a_tmp +
       (j_a_tmp_tmp * 100.0 + g_a_tmp * 0.0) * p_a_tmp / J_tmp) /
          f_J_tmp * -J_tmp -
      1.0 / std::sqrt(n_a_tmp * n_a_tmp * -0.0001 / b_J_tmp + 1.0) *
          (c_J_tmp *
               ((k_a_tmp *
                     ((a_tmp_tmp * -16.0 + std::sin(roll) * 16.5) + 16.0) *
                     2.0 +
                 b_a_tmp * (std::cos(roll) * 16.0 - std::sin(roll) * 16.5) *
                     ((std::sin(pitch) * -47.2 +
                       b_a_tmp *
                           (std::cos(roll) * 16.5 + std::sin(roll) * 16.0)) +
                      290.0) *
                     2.0) +
                a_tmp *
                    (std::cos(pitch) * 47.2 +
                     a_tmp * (std::cos(roll) * 16.5 + std::sin(roll) * 16.0)) *
                    i_a_tmp_tmp * 2.0) *
               0.01 +
           d_J_tmp *
               (j_a_tmp_tmp * m_a_tmp / 50.0 +
                std::sin(pitch) *
                    (std::cos(pitch) * 47.2 +
                     std::sin(pitch) *
                         (std::cos(roll) * 16.5 + std::sin(roll) * 16.0)) *
                    (std::cos(roll) * 16.0 - std::sin(roll) * 16.5) * 2.0) *
               e_J_tmp);
  f_a_tmp_tmp = h_a_tmp * h_a_tmp;
  i_a_tmp_tmp = h_a_tmp_tmp + c_a_tmp * c_a_tmp / 10000.0;
  g_a_tmp = 1.0 / std::sqrt(i_a_tmp_tmp);
  j_a_tmp_tmp = 1.0 / rt_powd_snf(i_a_tmp_tmp, 1.5);
  c_a_tmp_tmp = q_a_tmp * -0.005;
  e_a_tmp_tmp = j_a_tmp * j_a_tmp + f_a_tmp_tmp;
  J[1] =
      ((0.0 - unnamed_idx_1_tmp * 100.0) /
           ((((0.0 - a_tmp * 4720.0) +
              std::cos(pitch) *
                  (std::cos(roll) * 16.5 - std::sin(roll) * 16.0) * 100.0) +
             std::sin(pitch) * (std::cos(roll) * 16.5 - std::sin(roll) * 16.0) *
                 0.0) +
            23200.0) +
       (b_unnamed_idx_1_tmp * 100.0 - unnamed_idx_1_tmp * 0.0) *
           (b_a_tmp * 4720.0 -
            std::sin(pitch) * (std::cos(roll) * 16.5 - std::sin(roll) * 16.0) *
                -100.0) /
           f_a_tmp_tmp) /
          e_a_tmp_tmp * f_a_tmp_tmp +
      1.0 / std::sqrt(q_a_tmp * q_a_tmp * -0.0001 / i_a_tmp_tmp + 1.0) *
          (g_a_tmp *
               ((((a_tmp_tmp * 16.5 - b_a_tmp_tmp * 16.0) *
                      ((a_tmp_tmp * 16.0 + b_a_tmp_tmp * 16.5) - 16.0) * -2.0 +
                  b_a_tmp * (std::cos(roll) * 16.0 + std::sin(roll) * 16.5) *
                      ((a_tmp * -47.2 + b_a_tmp * (std::cos(roll) * 16.5 -
                                                   std::sin(roll) * 16.0)) +
                       232.0) *
                      2.0) +
                 a_tmp *
                     (b_a_tmp * 47.2 +
                      a_tmp * (std::cos(roll) * 16.5 - std::sin(roll) * 16.0)) *
                     k_a_tmp_tmp * 2.0) /
                100.0) +
           j_a_tmp_tmp *
               (b_unnamed_idx_1_tmp *
                    ((a_tmp * -4720.0 +
                      std::cos(pitch) *
                          (std::cos(roll) * 16.5 - std::sin(roll) * 16.0) *
                          100.0) +
                     23200.0) /
                    50.0 +
                std::sin(pitch) *
                    (std::cos(pitch) * 47.2 +
                     std::sin(pitch) *
                         (std::cos(roll) * 16.5 - std::sin(roll) * 16.0)) *
                    (std::cos(roll) * 16.0 + std::sin(roll) * 16.5) * 2.0) *
               c_a_tmp_tmp);
  J[2] = (c_J_tmp * (unnamed_idx_2_tmp + l_a_tmp * e_a_tmp * 2.0) / 100.0 +
          d_J_tmp *
              (unnamed_idx_2_tmp +
               (i_a_tmp + b_unnamed_idx_2_tmp) * m_a_tmp / 5000.0) *
              e_J_tmp) *
             (1.0 / std::sqrt(n_a_tmp * n_a_tmp * -0.0001 / b_J_tmp + 1.0)) +
         ((l_a_tmp_tmp - d_a_tmp_tmp * -100.0) / o_a_tmp +
          p_a_tmp * ((i_a_tmp - d_a_tmp_tmp * 0.0) + b_unnamed_idx_2_tmp) /
              J_tmp) /
             f_J_tmp * J_tmp;
  J[3] =
      1.0 / std::sqrt(q_a_tmp * q_a_tmp * -0.0001 / i_a_tmp_tmp + 1.0) *
          (g_a_tmp *
               (d_a_tmp * (unnamed_idx_2_tmp_tmp - g_a_tmp_tmp) * 2.0 +
                d_a_tmp * f_a_tmp * 2.0) /
               100.0 +
           j_a_tmp_tmp *
               ((std::cos(pitch) * 47.2 +
                 std::sin(pitch) *
                     (std::cos(roll) * 16.5 - std::sin(roll) * 16.0)) *
                    (a_tmp * 47.2 - std::cos(pitch) * (std::cos(roll) * 16.5 -
                                                       std::sin(roll) * 16.0)) *
                    2.0 +
                (i_a_tmp + unnamed_idx_3_tmp) * c_a_tmp / 5000.0) *
               c_a_tmp_tmp) +
      1.0 / e_a_tmp_tmp *
          ((l_a_tmp_tmp - g_a_tmp_tmp * -100.0) / h_a_tmp +
           j_a_tmp * ((i_a_tmp - g_a_tmp_tmp * 0.0) + unnamed_idx_3_tmp) *
               (1.0 / f_a_tmp_tmp)) *
          f_a_tmp_tmp;
}

//
// File trailer for foot_jacobian.cpp
//
// [EOF]
//
